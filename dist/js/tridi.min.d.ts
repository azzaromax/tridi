declare type ImageArray = ReadonlyArray<string>;
declare type NumberedImages = 'numbered';
interface TridiOptions {
    element: string;
    images: ImageArray | NumberedImages;
    imageFormat?: string;
    imageCount?: number;
    imageLocation?: string;
    count?: number;
    showHintOnStartup?: boolean;
    lazy?: boolean;
    hintText?: string | null;
    draggable?: boolean;
    autoplay?: boolean;
    autoplaySpeed?: number;
    stopAutoplayOnClick?: boolean;
    stopAutoplayOnMouseenter?: boolean;
    resumeAutoplayOnMouseleave?: boolean;
    resumeAutoplayDelay: number;
    buttons?: boolean;
    scroll?: boolean;
    spinner?: boolean;
    mousewheel?: boolean;
    wheelInverse?: boolean;
    dragInterval?: number;
    touchDragInterval?: number;
    mouseleaveDetect?: boolean;
    touch?: boolean;
    inverse?: boolean;
    playable?: boolean;
    verbose?: boolean;
}
declare class Tridi {
    element: string;
    images?: ImageArray | NumberedImages;
    imageFormat?: string;
    imageLocation?: string;
    imageCount?: number;
    draggable?: boolean;
    showHintOnStartup?: boolean;
    hintText?: string | null;
    lazy?: boolean;
    autoplay?: boolean;
    autoplaySpeed?: number;
    stopAutoplayOnClick?: boolean;
    stopAutoplayOnMouseenter?: boolean;
    resumeAutoplayOnMouseleave?: boolean;
    resumeAutoplayDelay: number;
    buttons?: boolean;
    scroll?: boolean;
    spinner?: boolean;
    dragInterval?: number;
    touchDragInterval?: number;
    mouseleaveDetect?: boolean;
    touch?: boolean;
    mousewheel?: boolean;
    wheelInverse?: boolean;
    inverse?: boolean;
    verbose: boolean;
    private imageIndex;
    private moveBuffer;
    private moveState;
    private dragActive;
    private intervals;
    private timeouts;
    constructor(options: TridiOptions);
    static header(element?: string): string;
    private validateOptions;
    private appendClass;
    private addClassName;
    private removeClassName;
    private getContainer;
    private getViewer;
    private getStash;
    private getLeftButton;
    private getRightButton;
    private getHintOverlay;
    private getLoadingScreen;
    private getImage;
    private getFirstImage;
    private getViewerImage;
    private lazyLoad;
    private getImages;
    private generateViewer;
    private generateLoadingScreen;
    private setLoadingState;
    private generateStash;
    private displayHintOnStartup;
    private populateStash;
    private generateViewerImage;
    private nextFrame;
    private previousFrame;
    private rotateViewerImage;
    private startDragging;
    private stopDragging;
    private resetMoveBuffer;
    private attachCosmeticEvents;
    private attachDragEvents;
    private attachMouseLeaveDetection;
    private attachTouchEvents;
    private attachMousewheelEvents;
    private generateButtons;
    private attachButtonEvents;
    private toggleAutoplay;
    private startAutoplay;
    private start;
    load(): void;
}
